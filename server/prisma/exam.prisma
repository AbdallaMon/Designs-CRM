
model Course {
  id          Int         @id @default(autoincrement())
  title       String     
  description String?   @db.Text
  roles CourseRole[]
  certificates Certificate[]
  lessons     Lesson[]
  exam        Exam?
  progress    CourseProgress[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CourseRole {
  id        Int       @id @default(autoincrement())
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  Int
  role      UserRole
}

model Lesson {
  id          Int        @id @default(autoincrement())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    Int
  title       String  
  description  String?   @db.Text
  order       Int
  videos      LessonVideo[]
  pdfs        LessonPDF[]
  links       LessonLink[]
  test        LessonTest?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  @@unique([courseId, order])

}

model LessonVideo {
  id        Int    @id @default(autoincrement())
  lesson    Lesson @relation(fields: [lessonId], references: [id])
  lessonId  Int
  iframeUrl String @db.LongText
}

model LessonPDF {
  id       Int    @id @default(autoincrement())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  url      String @db.LongText
}

model LessonLink {
  id       Int    @id @default(autoincrement())
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  url      String @db.LongText
  title    String
}

model LessonTest {
  id       Int       @id @default(autoincrement())
  lesson   Lesson    @relation(fields: [lessonId], references: [id])
  lessonId Int       @unique
  questions TestQuestion[]
}

model TestQuestion {
  id         Int             @id @default(autoincrement())
  test       LessonTest      @relation(fields: [testId], references: [id])
  testId     Int
  type       CoursesQuestionType
  question   String       @db.Text
  choices    TestChoice[]
  correct    String?       
}

model TestChoice {
  id           Int           @id @default(autoincrement())
  question     TestQuestion  @relation(fields: [questionId], references: [id])
  questionId   Int
  text         String
  value        String
}

enum CoursesQuestionType {
  MULTIPLE_CHOICE
  TEXT
}

model CourseProgress {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  course          Course            @relation(fields: [courseId], references: [id])
  courseId        Int
  completedLessons CompletedLesson[]
  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
}


model CompletedLesson {
  id            Int             @id @default(autoincrement())
  courseProgress CourseProgress @relation(fields: [courseProgressId], references: [id])
  courseProgressId Int
  lessonId      Int
}

model Exam {
  id         Int         @id @default(autoincrement())
  course     Course      @relation(fields: [courseId], references: [id])
  courseId   Int         @unique 
  questions  ExamQuestion[]
  attempts   ExamAttempt[]
  certificateApprovedByAdmin Boolean @default(false)
  defaultAttemptLimit Int @default(2)
  attemptNumbers Int @default(0)
}

model ExamQuestion {
  id        Int        @id @default(autoincrement())
  exam      Exam       @relation(fields: [examId], references: [id])
  examId    Int
  type      CoursesQuestionType
  question String   @db.Text
  choices   ExamChoice[]
  userAnswers UserAnswer[]

  correct   String?    
}

model ExamChoice {
  id         Int           @id @default(autoincrement())
  question   ExamQuestion  @relation(fields: [questionId], references: [id])
  questionId Int
  text       String
  value      String
}

model ExamAttempt {
  id         Int           @id @default(autoincrement())
  exam       Exam          @relation(fields: [examId], references: [id])
  examId     Int
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  answers    UserAnswer[]
  score      Float?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  passed     Boolean       @default(false)
  attemptNum Int
}

model UserAnswer {
  id           Int           @id @default(autoincrement())
  attempt      ExamAttempt   @relation(fields: [attemptId], references: [id])
  attemptId    Int
  question   ExamQuestion @relation(fields: [questionId], references: [id])
  questionId Int
  selected     String? 
}

model Certificate {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  course     Course    @relation(fields: [courseId], references: [id])
  courseId   Int
  isApproved Boolean @default(false)
  createdAt  DateTime  @default(now())
  fileUrl       String?     @db.Text

}

  courseProgress CourseProgress[]
  examAttempts   ExamAttempt[]
  certificates   Certificate[]