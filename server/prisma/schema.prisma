// Keep the generator, datasource and enums as is
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
 NEW_LEAD
 LEAD_ASSIGNED
 LEAD_STATUS_CHANGE
 LEAD_TRANSFERRED
 LEAD_UPDATED
 LEAD_CONTACT
 NOTE_ADDED
 NEW_NOTE
 NEW_FILE
 CALL_REMINDER_CREATED
 CALL_REMINDER_STATUS
 PRICE_OFFER_SUBMITTED
 PRICE_OFFER_UPDATED
 FINAL_PRICE_ADDED
 FINAL_PRICE_CHANGED
 PAYMENT_ADDED         // New payment recorded
 PAYMENT_STATUS_UPDATED // Payment status updated
 EXTRA_FINAL_PRICE_ADDED // Extra final price added
 EXTRA_FINAL_PRICE_EDITED // Extra final price edited
 WORK_STAGE_UPDATED   // Work stage updated for 3D or 2D
 OTHER
}
enum ContentType {
 TEXT
 HTML
}

enum LeadCategory {
 CONSULTATION
 DESIGN
 OLDLEAD
}
enum LeadType{
// design
 ROOM
 BLUEPRINT
 CITY_VISIT

 APARTMENT
 CONSTRUCTION_VILLA
 UNDER_CONSTRUCTION_VILLA
 PART_OF_HOME
 COMMERCIAL
 NONE
}


enum Emirate {
 DUBAI
 ABU_DHABI
 SHARJAH
 AJMAN
 UMM_AL_QUWAIN
 RAS_AL_KHAIMAH
 FUJAIRAH
 KHOR_FAKKAN
 OUTSIDE
}

enum UserRole {
  ADMIN          
  STAFF          
  THREE_D_DESIGNER  
  TWO_D_DESIGNER    
  TWO_D_EXECUTOR
  ACCOUNTANT        
  SUPER_ADMIN      
}


enum ClientLeadStatus {
 NEW
 IN_PROGRESS
 INTERESTED
 NEEDS_IDENTIFIED
 NEGOTIATING
 REJECTED
 FINALIZED
 CONVERTED
 ON_HOLD
}

enum CallReminderStatus {
  IN_PROGRESS
  DONE
  MISSED
}

// Updated ThreeDWorkStage enum
enum ThreeDWorkStage {
  CLIENT_COMMUNICATION
  DESIGN_STAGE
  THREE_D_STAGE
  THREE_D_APPROVAL
  FIRST_MODIFICATION
  SECOND_MODIFICATION
  THIRD_MODIFICATION
}

// Updated TwoDWorkStage enum
enum TwoDWorkStage {
  DRAWING_PLAN
  FINAL_DELIVERY
  QUANTITY
}

enum TwoDExacuterStage {
  PROGRESS            // progress
  PRICING             // قيد التسعير
  ACCEPTED            // مقبول
  REJECTED            // مرفوض
}


enum PaymentStatus {
  PENDING        // Payment is pending
  PARTIALLY_PAID // Payment partially made
  FULLY_PAID     // Payment fully made
  OVERDUE
}

enum PaymentLevel {
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
  LEVEL_5
  LEVEL_6
  LEVEL_7_OR_MORE
}


model WorkStageStatus {
  id             Int             @id @default(autoincrement())
  
  // Relation to ClientLead
  clientLead     ClientLead      @relation(fields: [clientLeadId], references: [id])
  clientLeadId   Int
  
  // Work Stage
  stage          ThreeDWorkStage
  
  communicationStatus Boolean            @default(false)
  communicationUpdatedAt DateTime?       // Timestamp for last update
  designStageStatus   Boolean            @default(false)
  designStageUpdatedAt DateTime?        // Timestamp for last update
  renderStatus        Boolean            @default(false)
  renderUpdatedAt     DateTime?         // Timestamp for last update
  
  // Unique constraint to prevent duplicate stages for the same client lead
  @@unique([clientLeadId, stage])
  
  // Indexes for performance
  @@index([clientLeadId])
  @@index([stage])
}
model ClientLead {
      id                 Int              @id @default(autoincrement())
      client             Client           @relation(fields: [clientId], references: [id])
      clientId           Int
      assignedTo         User?            @relation(fields: [userId], references: [id])
      userId             Int?

      threeDDesigner     User?            @relation("ThreeDLeads", fields: [threeDDesignerId], references: [id]) // Assigned 3D Designer
      threeDDesignerId   Int?
      twoDDesigner       User?            @relation("TwoDLeads", fields: [twoDDesignerId], references: [id]) // Assigned 2D Designer
      twoDDesignerId     Int?
      twoDExacuter         User?           @relation("TwoDExacuterLeads", fields: [twoDExacuterId], references: [id]) // New relation for 2D Executer
      twoDExacuterId       Int?
      accountant         User?            @relation("AccountantLeads", fields: [accountantId], references: [id]) // Assigned Accountant
      accountantId       Int?
      
      // Work Stages
      threeDWorkStage   ThreeDWorkStage?
      twoDWorkStage     TwoDWorkStage?
      twoDExacuterStage    TwoDExacuterStage? // New work stage
      workStageStatuses WorkStageStatus[]

      // Lead type data
      selectedCategory   LeadCategory
      type   LeadType @default(CONSTRUCTION_VILLA)
      description String?
      clientDescription  String? @db.Text   
      discount  Decimal   @db.Decimal(10, 2) @default(0)
      emirate            Emirate?
      price              String?
      averagePrice  Decimal?   @db.Decimal(10, 2)
      priceNote String?  @db.Text
      priceWithOutDiscount  Decimal   @db.Decimal(10, 2) @default(0)
      priceOffers PriceOffers[]

      payments         Payment[]

      status             ClientLeadStatus @default(NEW)
      files              File[]
      notes              Note[]
      notifications      Notification[]
      callReminders      CallReminder[]   @relation("clientLeadCallReminders")

      extraServices     ExtraService[]

      assignedAt         DateTime?
      threeDAssignedAt   DateTime?
      twoDAssignedAt     DateTime?
      twoDExacuterAssignedAt DateTime?     // New assigned at timestamp
      accountantAssignedAt DateTime?

      reasonToConvert String?

      ourCost              String?         // تكلفه علينا - new optional field
      contractorCost       String?   

      createdAt          DateTime         @default(now())
      updatedAt          DateTime         @updatedAt

      timeToContact       DateTime?
      country             String?
      commissionCleared     Boolean            @default(false) 

      @@index([clientId])
      @@index([userId])
}
model Payment {
  id             Int        @id @default(autoincrement())
  clientLead     ClientLead @relation(fields: [clientLeadId], references: [id])
  clientLeadId   Int
  status         PaymentStatus @default(PENDING)
  amount         Decimal    @db.Decimal(10, 2)
  amountPaid     Decimal    @db.Decimal(10, 2) @default(0)
  amountLeft     Decimal    @db.Decimal(10, 2)
  paymentLevel   PaymentLevel? 
  paymentReason   String?   @db.Text
  invoices       Invoice[]
  notes           Note[] 
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

// Invoice Model
model Invoice {
  id          Int        @id @default(autoincrement())
  payment     Payment    @relation(fields: [paymentId], references: [id])
  paymentId   Int
  issuedDate  DateTime   @default(now())
  amount      Decimal    @db.Decimal(10, 2)
  notes       Note[]
  createdAt   DateTime   @default(now())
  invoiceNumber    String             @unique
}


model ExtraService {
  id          Int        @id @default(autoincrement())
  clientLead  ClientLead @relation(fields: [clientLeadId], references: [id])
  clientLeadId Int
  price       Decimal    @db.Decimal(10, 2)
  note        String?    @db.Text
  createdAt   DateTime   @default(now())
}

model PriceOffers {
  id           Int        @id @default(autoincrement())
  clientLead   ClientLead @relation(fields: [clientLeadId], references: [id])
  clientLeadId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  url          String?    @db.VarChar(255)
  minPrice     Decimal?   @db.Decimal(10, 2)  // Made optional
  maxPrice     Decimal?   @db.Decimal(10, 2)  // Made optional
  note         String?    @db.Text  // Added this field
  isAccepted   Boolean    @default(false) 
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([clientLeadId])
}


model CallReminder {
  id            Int              @id @default(autoincrement())
  clientLead    ClientLead       @relation(fields: [clientLeadId], references: [id], name: "clientLeadCallReminders")
  clientLeadId  Int
  time          DateTime
  status        CallReminderStatus @default(IN_PROGRESS)
  callResult    String?           @db.Text
  reminderReason String?          @db.Text
  user    User              @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([clientLeadId])
  @@index([userId])
}


model File {
 id           Int        @id @default(autoincrement())
 name         String     @db.VarChar(255)
 url          String     @db.VarChar(255)
 description  String?    @db.Text
 clientLead   ClientLead @relation(fields: [clientLeadId], references: [id])
 clientLeadId Int
 isUserFile   Boolean    @default(true)
 createdAt    DateTime   @default(now())
 user         User?       @relation(fields: [userId], references: [id])
 userId    Int?
 @@index([clientLeadId, isUserFile])
}

model User {
 id            Int            @id @default(autoincrement())
 email         String         @unique @db.VarChar(255)
 name          String         @db.VarChar(255)
 password      String         @db.VarChar(255)
 isActive         Boolean           @default(true)
 role          UserRole       @default(STAFF)
 subRoles      UserSubRole[]
 logs          UserLog[]      
 clientLeads   ClientLead[]
 notifications   Notification[]   @relation("UserNotifications")
 staffNotifications Notification[] @relation("StaffNotifications")
 notes         Note[]
 priceOffers PriceOffers[]
 createdAt     DateTime       @default(now())
 updatedAt     DateTime       @updatedAt
 callReminders CallReminder[]
 files File[]
 lastSeenAt    DateTime?    
 maxLeadsCounts Int?             @default(50)
 threeDLeads ClientLead[] @relation("ThreeDLeads")
 twoDLeads ClientLead[] @relation("TwoDLeads")
 twoDExacuterLeads ClientLead[] @relation("TwoDExacuterLeads") // New relation
 accountantLeads ClientLead[] @relation("AccountantLeads")
 baseSalary    BaseEmployeeSalary? 
 notAllowedCountries Json?
 @@index([email])
}

model UserSubRole {
  id       Int      @id @default(autoincrement())
  userId   Int
  subRole  UserRole
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, subRole]) // Ensure a user cannot have the same sub-role twice
}

model UserLog {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         DateTime @default(now()) // Not unique anymore
  totalMinutes Int      @default(0)       // Track minutes spent
  description  String?   // New field to store descripti

  @@unique([userId]) // Ensure only one entry per day per user
  @@index([userId])
}


model Client {
 id          Int          @id @default(autoincrement())
 name        String       @db.VarChar(255)
 phone       String       @db.VarChar(20)
 email       String       @db.VarChar(255) @unique
 clientLeads ClientLead[]
 createdAt   DateTime     @default(now())
 updatedAt   DateTime     @updatedAt

 @@index([email])
}

model Note {
  id            Int         @id @default(autoincrement())
  content       String?     @db.Text // Optional content field
  attachment    String?     @db.Text // Optional attachment field
  clientLead    ClientLead? @relation(fields: [clientLeadId], references: [id])
  clientLeadId  Int?
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime    @default(now())
  
  // New relations
  baseEmployeeSalary   BaseEmployeeSalary? @relation(fields: [baseEmployeeSalaryId], references: [id])
  baseEmployeeSalaryId Int?
  rent                 Rent?              @relation(fields: [rentId], references: [id])
  rentId               Int?
  rentPeriod           RentPeriod?        @relation(fields: [rentPeriodId], references: [id])
  rentPeriodId         Int?
  operationalExpenses  OperationalExpenses? @relation(fields: [operationalExpensesId], references: [id])
  operationalExpensesId Int?
  payment              Payment?           @relation(fields: [paymentId], references: [id])
  paymentId            Int?
  invoice            Invoice?   @relation( fields: [invoiceId], references: [id])
  invoiceId          Int?

  @@index([clientLeadId])
  @@index([userId])
  @@index([baseEmployeeSalaryId])
  @@index([rentId])
  @@index([rentPeriodId])
  @@index([operationalExpensesId])
  @@index([paymentId])
  @@index([invoiceId])
}



model Notification {
 id           Int              @id @default(autoincrement())
 type         NotificationType
 content      String           @db.Text
 contentType ContentType @default(TEXT)
 link         String?          @db.VarChar(255)
 isRead       Boolean          @default(false)
 user         User?            @relation("UserNotifications", fields: [userId], references: [id])
 userId       Int?
 staff        User?            @relation("StaffNotifications", fields: [staffId], references: [id])
 staffId      Int?
 clientLead   ClientLead?       @relation(fields: [clientLeadId], references: [id])
 clientLeadId Int?
 createdAt    DateTime         @default(now())

 @@index([userId])
 @@index([clientLeadId])
}

model FixedData {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BaseEmployeeSalary {
  id              Int             @id @default(autoincrement())
  employee        User            @relation(fields: [userId], references: [id])
  userId          Int             @unique   // Add @unique here to enforce the one-to-one relationship
  baseSalary      Decimal         @db.Decimal(10, 2)
  taxAmount       Decimal         @db.Decimal(10, 2) @default(0) // Add taxAmount field for transparency
  baseWorkHours   Int
  notes           Note[] 
  monthlySalaries MonthlySalary[] 
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model MonthlySalary {
  id              Int             @id @default(autoincrement())
  baseSalary      BaseEmployeeSalary @relation(fields: [baseSalaryId], references: [id])
  baseSalaryId    Int
  totalHoursWorked Int
  overtimeHours   Int             @default(0)
  bonuses         Decimal         @db.Decimal(10, 2) @default(0)
  deductions      Decimal         @db.Decimal(10, 2) @default(0)
  netSalary       Decimal         @db.Decimal(10, 2)
  isFulfilled     Boolean         @default(false)
  paymentDate     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  outcome         Outcome?        @relation(fields: [outcomeId], references: [id])  // Optional relationship to Outcome
  outcomeId       Int?            // Foreign key to Outcome, nullable to make it optional
}

model Rent {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(255) 
  description     String?         @db.Text        
  notes           Note[]       
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  rentPeriods     RentPeriod[]  
}

model RentPeriod {
  id              Int             @id @default(autoincrement())
  rent            Rent            @relation(fields: [rentId], references: [id])  // Relationship to Rent model
  rentId          Int
  startDate       DateTime        
  endDate         DateTime       
  amount          Decimal         @db.Decimal(10, 2) 
  isPaid          Boolean         @default(false)     
  notes           Note[]           
  createdAt       DateTime        @default(now())    
  updatedAt       DateTime        @updatedAt      
  outcome         Outcome?        @relation(fields: [outcomeId], references: [id])  // Optional relationship to Outcome
  outcomeId       Int?           
}

model OperationalExpenses {
  id              Int             @id @default(autoincrement())
  category        String          @db.VarChar(255) // e.g., "Utilities", "Office Supplies"
  description     String?         @db.Text
  amount          Decimal         @db.Decimal(10, 2)
  paymentDate     DateTime
  paymentStatus   PaymentStatus   @default(PENDING)
  notes           Note[] 
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  outcome         Outcome?        @relation(fields: [outcomeId], references: [id])  // Optional relationship to Outcome
  outcomeId       Int?            // Foreign key to Outcome, nullable to make it optional
}

model Outcome {
  id              Int             @id @default(autoincrement())
  type            String?          @db.VarChar(50) // e.g., "Salary", "Rent", "Operational Expense"
  amount          Decimal         @db.Decimal(10, 2)
  description     String?         @db.Text // Optional description
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  rentPeriods     RentPeriod[]    // Optional relation back to RentPeriod, making it optional
  operationalExpenses OperationalExpenses[]  // Optional relation back to OperationalExpenses, making it optional
  monthlySalaries MonthlySalary[]  // Optional relation back to OperationalExpenses, making it optional
}