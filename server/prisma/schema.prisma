// Keep the generator, datasource and enums as is
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
 NEW_LEAD
 LEAD_ASSIGNED
 LEAD_STATUS_CHANGE
 LEAD_TRANSFERRED
 LEAD_UPDATED
 LEAD_CONTACT
 NOTE_ADDED
 NEW_NOTE
 NEW_FILE
 CALL_REMINDER_CREATED
 CALL_REMINDER_STATUS
 PRICE_OFFER_SUBMITTED
 PRICE_OFFER_UPDATED
 FINAL_PRICE_ADDED
 FINAL_PRICE_CHANGED
 PAYMENT_ADDED         // New payment recorded
 PAYMENT_STATUS_UPDATED // Payment status updated
 EXTRA_FINAL_PRICE_ADDED // Extra final price added
 EXTRA_FINAL_PRICE_EDITED // Extra final price edited
 WORK_STAGE_UPDATED   // Work stage updated for 3D or 2D
 OTHER
}
enum ContentType {
 TEXT
 HTML
}

enum LeadCategory {
 CONSULTATION
 DESIGN
 OLDLEAD
}
enum LeadType{
// design
 ROOM
 BLUEPRINT
 CITY_VISIT

 APARTMENT
 CONSTRUCTION_VILLA
 UNDER_CONSTRUCTION_VILLA
 PART_OF_HOME
 COMMERCIAL
 NONE
}


enum Emirate {
 DUBAI
 ABU_DHABI
 SHARJAH
 AJMAN
 UMM_AL_QUWAIN
 RAS_AL_KHAIMAH
 FUJAIRAH
 KHOR_FAKKAN
 OUTSIDE
}

enum UserRole {
  ADMIN          
  STAFF          
  THREE_D_DESIGNER  // 3D Designer role, can handle 3D design projects
  TWO_D_DESIGNER    // 2D Designer role, works after 3D stage is complete
  ACCOUNTANT        // Accountant role, manages payments and installments
  SUPER_ADMIN       // Super Admin role, can monitor actions but not see users
}


enum ClientLeadStatus {
 NEW
 IN_PROGRESS
 INTERESTED
 NEEDS_IDENTIFIED
 NEGOTIATING
 REJECTED
 FINALIZED
 CONVERTED
 ON_HOLD
}

enum CallReminderStatus {
  IN_PROGRESS
  DONE
  MISSED
}

// Work Stages for 3D Designer
enum ThreeDWorkStage {
  CLIENT_COMMUNICATION
  DESIGN_STAGE
  THREE_D_STAGE
  THREE_D_APPROVAL
}

// Work Stages for 2D Designer
enum TwoDWorkStage {
  DRAWING_PLAN
  FINAL_DELIVERY
}

enum PaymentStatus {
  PENDING        // Payment is pending
  PARTIALLY_PAID // Payment partially made
  FULLY_PAID     // Payment fully made
}


model ClientLead {
      id                 Int              @id @default(autoincrement())
      client             Client           @relation(fields: [clientId], references: [id])
      clientId           Int
      assignedTo         User?            @relation(fields: [userId], references: [id])
      userId             Int?

      threeDDesigner     User?            @relation("ThreeDLeads", fields: [threeDDesignerId], references: [id]) // Assigned 3D Designer
      threeDDesignerId   Int?
      twoDDesigner       User?            @relation("TwoDLeads", fields: [twoDDesignerId], references: [id]) // Assigned 2D Designer
      twoDDesignerId     Int?
      accountant         User?            @relation("AccountantLeads", fields: [accountantId], references: [id]) // Assigned Accountant
      accountantId       Int?
      
      // Work Stages
      threeDWorkStage   ThreeDWorkStage?
      twoDWorkStage     TwoDWorkStage?

      // Lead type data
      selectedCategory   LeadCategory
      type   LeadType @default(CONSTRUCTION_VILLA)
      description String?
      clientDescription  String? @db.Text   
      discount  Decimal   @db.Decimal(10, 2) @default(0)
      emirate            Emirate?
      price              String?
      averagePrice  Decimal?   @db.Decimal(10, 2)
      priceNote String?  @db.Text
      priceWithOutDiscount  Decimal   @db.Decimal(10, 2) @default(0)
      priceOffers PriceOffers[]

      payments         Payment[]

      status             ClientLeadStatus @default(NEW)
      files              File[]
      notes              Note[]
      notifications      Notification[]
      callReminders      CallReminder[]   @relation("clientLeadCallReminders")

      extraServices     ExtraService[]

      assignedAt         DateTime?
      reasonToConvert String?
      createdAt          DateTime         @default(now())
      updatedAt          DateTime         @updatedAt

      timeToContact       DateTime?
      country             String?
      @@index([clientId])
      @@index([userId])
}
model Payment {
  id             Int        @id @default(autoincrement())
  clientLead     ClientLead @relation(fields: [clientLeadId], references: [id])
  clientLeadId   Int
  status         PaymentStatus @default(PENDING)
  amount         Decimal    @db.Decimal(10, 2)
  amountPaid     Decimal    @db.Decimal(10, 2) @default(0)
  amountLeft     Decimal    @db.Decimal(10, 2)
  dueDate        DateTime
  invoices       Invoice[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

// Invoice Model
model Invoice {
  id          Int        @id @default(autoincrement())
  payment     Payment    @relation(fields: [paymentId], references: [id])
  paymentId   Int
  issuedDate  DateTime   @default(now())
  amount      Decimal    @db.Decimal(10, 2)
  createdAt   DateTime   @default(now())
}


model ExtraService {
  id          Int        @id @default(autoincrement())
  clientLead  ClientLead @relation(fields: [clientLeadId], references: [id])
  clientLeadId Int
  price       Decimal    @db.Decimal(10, 2)
  note        String?    @db.Text
  createdAt   DateTime   @default(now())
}

model PriceOffers {
  id           Int        @id @default(autoincrement())
  clientLead   ClientLead @relation(fields: [clientLeadId], references: [id])
  clientLeadId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  url          String?    @db.VarChar(255)
  minPrice     Decimal?   @db.Decimal(10, 2)  // Made optional
  maxPrice     Decimal?   @db.Decimal(10, 2)  // Made optional
  note         String?    @db.Text  // Added this field
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([clientLeadId])
}


model CallReminder {
  id            Int              @id @default(autoincrement())
  clientLead    ClientLead       @relation(fields: [clientLeadId], references: [id], name: "clientLeadCallReminders")
  clientLeadId  Int
  time          DateTime
  status        CallReminderStatus @default(IN_PROGRESS)
  callResult    String?           @db.Text
  reminderReason String?          @db.Text
  user    User              @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([clientLeadId])
  @@index([userId])
}


model File {
 id           Int        @id @default(autoincrement())
 name         String     @db.VarChar(255)
 url          String     @db.VarChar(255)
 description  String?    @db.Text
 clientLead   ClientLead @relation(fields: [clientLeadId], references: [id])
 clientLeadId Int
 isUserFile   Boolean    @default(true)
 createdAt    DateTime   @default(now())
 user         User?       @relation(fields: [userId], references: [id])
 userId    Int?
 @@index([clientLeadId, isUserFile])
}

model User {
 id            Int            @id @default(autoincrement())
 email         String         @unique @db.VarChar(255)
 name          String         @db.VarChar(255)
 password      String         @db.VarChar(255)
 isActive         Boolean           @default(true)
 role          UserRole       @default(STAFF)
 logs        UserLog[] 
 clientLeads   ClientLead[]
 notifications   Notification[]   @relation("UserNotifications")
 staffNotifications Notification[] @relation("StaffNotifications")
 notes         Note[]
 priceOffers PriceOffers[]
 createdAt     DateTime       @default(now())
 updatedAt     DateTime       @updatedAt
 callReminders CallReminder[]
 files File[]
 lastSeenAt    DateTime?    
 maxLeadsCounts Int?             @default(50)
 threeDLeads ClientLead[] @relation("ThreeDLeads")
 twoDLeads ClientLead[] @relation("TwoDLeads")
 accountantLeads ClientLead[] @relation("AccountantLeads")
 @@index([email])
}

model UserLog {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  signInAt    DateTime
  signOutAt   DateTime?
  totalHours  Decimal?  @db.Decimal(5, 2) 

  @@index([userId])
}

model Client {
 id          Int          @id @default(autoincrement())
 name        String       @db.VarChar(255)
 phone       String       @db.VarChar(20)
 email       String       @db.VarChar(255) @unique
 clientLeads ClientLead[]
 createdAt   DateTime     @default(now())
 updatedAt   DateTime     @updatedAt

 @@index([email])
}

model Note {
 id           Int        @id @default(autoincrement())
 content      String     @db.Text
 clientLead   ClientLead @relation(fields: [clientLeadId], references: [id])
 clientLeadId Int
 user         User       @relation(fields: [userId], references: [id])
 userId       Int
 createdAt    DateTime   @default(now())

 @@index([clientLeadId])
 @@index([userId])
}


model Notification {
 id           Int              @id @default(autoincrement())
 type         NotificationType
 content      String           @db.Text
 contentType ContentType @default(TEXT)
 link         String?          @db.VarChar(255)
 isRead       Boolean          @default(false)
 user         User?            @relation("UserNotifications", fields: [userId], references: [id])
 userId       Int?
 staff        User?            @relation("StaffNotifications", fields: [staffId], references: [id])
 staffId      Int?
 clientLead   ClientLead?       @relation(fields: [clientLeadId], references: [id])
 clientLeadId Int?
 createdAt    DateTime         @default(now())

 @@index([userId])
 @@index([clientLeadId])
}

model FixedData {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}